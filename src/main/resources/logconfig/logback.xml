<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--
       说明：
       1、日志级别及文件
           日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中
           例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，
           日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名
           例如log-level-2013-12-21.0.log
           其它级别的日志也是如此。
       2、文件路径
           若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。
           若部署到Tomcat下，则在Tomcat下的logs文件中
       3、Appender
           FILEERROR对应error级别，文件名以log-error-xxx.log形式命名
           FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名
           FILEINFO对应info级别，文件名以log-info-xxx.log形式命名
           FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名
           stdout将日志信息输出到控制上，为方便开发测试使用
    -->
    <contextName>CasedataImport</contextName>
    <property name="LOG_PATH" value="./" />
    <!--设置系统日志目录-->
    <property name="LOG_DIR" value="logs" />

    <!-- 日志记录器，日期滚动记录 -->
    <!--<appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
        <!--<file>${LOG_PATH}/${LOG_DIR}/log_error.log</file>-->
        <!--&lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。-->
            <!--而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt;-->
            <!--<fileNamePattern>${LOG_PATH}/${LOG_DIR}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
            <!--&lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，-->
            <!--命名日志文件，例如log-error-2013-12-21.0.log &ndash;&gt;-->
            <!--<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
                <!--<maxFileSize>2MB</maxFileSize>-->
            <!--</timeBasedFileNamingAndTriggeringPolicy>-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
        <!--<append>true</append>-->
        <!--&lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
            <!--<pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%-5level]  [%thread] [%logger.%method:%-3line] : %msg%n</pattern>-->
            <!--<charset>utf-8</charset>-->
        <!--</encoder>-->
        <!--&lt;!&ndash; 此日志文件只记录info级别的 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>error</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
    <!--</appender>-->

    <!-- 日志记录器，日期滚动记录 -->
    <!--<appender name="FILEWARN" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
        <!--<file>${LOG_PATH}/${LOG_DIR}/log_warn.log</file>-->
        <!--&lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。-->
            <!--而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt;-->
            <!--<fileNamePattern>${LOG_PATH}/${LOG_DIR}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
            <!--&lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，-->
            <!--命名日志文件，例如log-error-2013-12-21.0.log &ndash;&gt;-->
            <!--<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
                <!--<maxFileSize>2MB</maxFileSize>-->
            <!--</timeBasedFileNamingAndTriggeringPolicy>-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
        <!--<append>true</append>-->
        <!--&lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
            <!--<pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%-5level]  [%thread] [%logger.%method:%-3line] : %msg%n</pattern>-->
            <!--<charset>utf-8</charset>-->
        <!--</encoder>-->
        <!--&lt;!&ndash; 此日志文件只记录info级别的 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>warn</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
    <!--</appender>-->

    <!-- 日志记录器，日期滚动记录 -->
    <!--<appender name="FILEINFO" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash; 正在记录的日志文件的路径及文件名 &ndash;&gt;-->
        <!--<file>${LOG_PATH}/${LOG_DIR}/log_info.log</file>-->
        <!--&lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。-->
            <!--而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt;-->
            <!--<fileNamePattern>${LOG_PATH}/${LOG_DIR}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
            <!--&lt;!&ndash; 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，-->
            <!--命名日志文件，例如log-error-2013-12-21.0.log &ndash;&gt;-->
            <!--<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
                <!--<maxFileSize>2MB</maxFileSize>-->
            <!--</timeBasedFileNamingAndTriggeringPolicy>-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
        <!--<append>true</append>-->
        <!--&lt;!&ndash; 日志文件的格式 &ndash;&gt;-->
        <!--<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">-->
            <!--<pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%-5level]  [%thread] [%logger.%method:%-3line] : %msg%n</pattern>-->
            <!--<charset>utf-8</charset>-->
        <!--</encoder>-->
        <!--&lt;!&ndash; 此日志文件只记录info级别的 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>info</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
    <!--</appender>-->

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--encoder 默认配置为PatternLayoutEncoder-->
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%-5.5level]  [%thread] [%logger.%method:%-3line] : %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>debug</level>
        </filter>
    </appender>






    <!-- 配置jobtask info 日志输出至单独的日志文件中 -->
    <appender name="TASK_LOG_INFO_TEXT" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_PATH}/${LOG_DIR}/jobtask/text/%d{yyyyMMddHHmmss}.log</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder
                class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <!-- 日志输出编码 -->
            <layout class="ch.qos.logback.classic.PatternLayout">
                <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
                <pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%-5level]  [%thread] [%logger.%method:%-3line] : %n\t\t%msg%n</pattern>
            </layout>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>


    <!-- 配置jobtask error HTML 日志输出至单独的日志文件中 -->
    <appender name="TASK_LOG_INFO_HTML" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${LOG_PATH}/target/classes/static/html/%d{yyyyMMddHHmmss}.html</FileNamePattern>
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="ch.qos.logback.classic.html.HTMLLayout">
                <pattern>%relative%thread%mdc%level%logger%msg</pattern>
            </layout>
        </encoder>

        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <appender name="WEBSOCKET" class="com.hnen.transdata.log.WebsocketAppender">
        <!--encoder 默认配置为PatternLayoutEncoder-->
        <!--<encoder>-->
            <!--<pattern>[%d{yyyy-MM-dd HH:mm:ss}] [%-5level]  [%thread] [%logger.%method:%-3line] : %msg%n</pattern>-->
            <!--<charset>utf-8</charset>-->
        <!--</encoder>-->
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>debug</level>-->
        <!--</filter>-->
    </appender>

    <!--需要将日志单独输出的包路径-->
    <logger name="org.springframework" level="WARN" />
    <!--<logger name="org.hibernate" level="WARN" />-->


    <logger name="com.hnen.transdata" level="INFO" additivity="true">
        <appender-ref ref="TASK_LOG_INFO_TEXT"/>
        <!--<appender-ref ref="TASK_LOG_INFO_HTML"/>-->
    </logger>
    <!--<logger name="com.hnen.casedata" level="ERROR" additivity="true">-->
        <!--<appender-ref ref="TASK_ERROR"/>-->
    <!--</logger>-->








    <root level="INFO">
        <!--<appender-ref ref="FILEERROR" />-->
        <!--<appender-ref ref="FILEWARN" />-->
        <!--<appender-ref ref="FILEINFO" />-->

        <!-- 生产环境将请stdout,testfile去掉 -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="WEBSOCKET"/>
        <!--<appender-ref ref="TASK_INFO"/>-->
        <!--<appender-ref ref="TASK_ERROR"/>-->
    </root>
</configuration>